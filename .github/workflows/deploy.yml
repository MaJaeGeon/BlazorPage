name : Example Workflow

on: 
  push:
    branches:
      - contents
      - develop
jobs:
  Generate-Contents-Map:
    runs-on: ubuntu-latest

    # contents 브렌치에서 push가 발생했을 때에만 실행
    if: github.ref_name == 'contents'

    steps:
      # wwwroot폴더에 contents branch 가져오기
      - uses: actions/checkout@v3
        with:
          ref: contents
          path: wwwroot

      # Python 설치하기
      - uses: actions/setup-python@v2
        with:
          python-version: 3.7

      # contents경로에 ContentsMapGenerator으로 ContentsMap.json 생성 / arg[1] : 출력경로
      - run: python ./wwwroot/ContentsMapGenerator.py "."

      # ContentsMapGenerator.py 삭제
      - run: rm -f ./wwwroot/ContentsMapGenerator.py

      # gh-pages 브렌치를 gh-pages 경로로 가져오기
      - uses: actions/checkout@v3
        with:
          ref: gh-pages
          path: gh-pages
      
      # wwwroot폴더를 gh-pages에 병합하기
      - run: \cp -Rf /wwwroot/ /gh-pages/

      # gh-pages에 gh-pages폴더 배포하기
      - uses: JamesIves/github-pages-deploy-action@3.7.1
        with:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
          BRANCH: gh-pages
          FOLDER: gh-pages

  deploy-to-github-pages:
    runs-on: ubuntu-18.04
    # contents 브렌치에서 push가 발생했을 때에만 실행
    if: github.ref_name == 'develop'
    steps:
    # develop branch를 기준으로 체크아웃
    - uses: actions/checkout@v2
      with:
        ref: develop
    
    # .NET Core SDK 설치
    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v1

    # BlazorPage 프로젝트를 릴리즈버전으로 빌드하고 release폴더에 저장
    - name: BlazorPage 릴리즈 버전으로 빌드
      run: dotnet publish BlazorPage.csproj -c Release -o release --nologo
    
    # changes the base-tag in index.html from '/' to 'BlazorPage' to match GitHub Pages repository subdirectory
    - name: Change base-tag in index.html from / to BlazorPage
      run: sed -i 's/<base href="\/" \/>/<base href="\/BlazorPage\/" \/>/g' release/wwwroot/index.html
    
    # copy index.html to 404.html to serve the same file when a file is not found
    - name: copy index.html to 404.html
      run: cp release/wwwroot/index.html release/wwwroot/404.html

    # add .nojekyll file to tell GitHub pages to not treat this as a Jekyll project. (Allow files and folders starting with an underscore)
    - name: Add .nojekyll file
      run: touch release/wwwroot/.nojekyll

    - name: checkout `gh-pages brench` # gh-pages 브랜치를 gh-pages 디렉토리에 체크아웃
      uses: actions/checkout@v3 
      with:
        ref: gh-pages
        path: gh-pages

    - name: move gh-pages/ContentsMap.json to wwwroot
      run: mv gh-pages/ContentsMap.json release/wwwroot/
      
    - name: Commit wwwroot to GitHub Pages
      uses: JamesIves/github-pages-deploy-action@3.7.1
      with:
        GITHUB_TOKEN: ${{ secrets.Repository_Access_Token }}
        BRANCH: gh-pages
        FOLDER: release/wwwroot
